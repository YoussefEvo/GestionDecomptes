<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:p="http://www.springframework.org/schema/p"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:jee="http://www.springframework.org/schema/jee"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
					http://www.springframework.org/schema/beans/spring-beans.xsd
					http://www.springframework.org/schema/context 
					http://www.springframework.org/schema/context/spring-context.xsd
					http://www.springframework.org/schema/aop 
					http://www.springframework.org/schema/aop/spring-aop.xsd
					http://www.springframework.org/schema/tx 
					http://www.springframework.org/schema/tx/spring-tx.xsd
					http://www.springframework.org/schema/jee 
					http://www.springframework.org/schema/jee/spring-jee.xsd">
					
	<jee:jndi-lookup id="gestiondecoCmptesDataSource" jndi-name="java:/gestiondecomptesDataSource"></jee:jndi-lookup>				
					
    <!-- Cela localisera automatiquement le fichier database.properties que vous avez Dans votre classpath,
    	 Le fichier de properties localisé est analysé et ses valeurs peuvent ensuite être utilisées dans 
    	 les Fichiers de contexte d'application sous la forme de $ {propertyKey}. -->
    <context:property-placeholder location="classpath:database.properties,classpath:application.properties"/>	
    
    
	<!--Cette déclaration amènera Spring à localiser chaque @Component, @Repository Et @Service dans ces packages-->
    <context:component-scan base-package="ma.co.marsamaroc.gestion.decomptes" />
    								
    									 
    
	<!-- Application Message Bundle -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
     	<property name="basenames">
            <list>
                <value>classpath:messages</value>
                <value>classpath:application</value>
            </list>
        </property>
<!--         <property name="defaultEncoding" value="UTF-8"/> -->
		<!-- <property name="basename" value="classpath:messages"/> -->
    </bean>
    
    <!-- Pour que l'annotation @PersistenceContext soit interprété par Spring on peut ajout la déclaration suivant -->
	<bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />	
	
	
	<!-- application Context Provider-->
    <bean id="applicationContextProvider" class="ma.co.marsamaroc.gestion.decomptes.utils.ApplicationContextProvider"></bean>
    
    <!-- Spring JPA -->
    
     
	
	<!-- data source Connection Pool C3P0-->  
<!-- 	<bean id="gestiondecomptesDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> -->
<!-- 		<property name="driverClassName" value="${jdbc.driverClass}" /> -->
<!-- 		<property name="url" value="${jdbc.url}" /> -->
<!-- 	</bean> -->
	
<!--	jndiName : JBOSS-->
	<bean id="gestiondecomptesDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
	    <property name="jndiName" value="java:/gestiondecomptesDataSource" />
	</bean>
	
	<bean id="jdbcTemplateDecompte" class="org.springframework.jdbc.core.JdbcTemplate">  
		<property name="dataSource" ref="gestiondecomptesDataSource"></property>  
	</bean>
	
	<!-- Define Hibernate JPA Vendor Adapter -->
	<bean id="jpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="databasePlatform" value="${hibernate.dialect}" />
	</bean> 
	
	<!-- Entity Manager Factory -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
	 	<property name="persistenceXmlLocation" value="classpath:META-INF/persistence.xml" />
	 	<property name="persistenceUnitName" value="jpa-persistence"></property>
		<property name="dataSource" ref="gestiondecomptesDataSource" />
		<property name="jpaVendorAdapter" ref="jpaVendorAdapter" />
		<property name="loadTimeWeaver">
            <bean class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver"/>
        </property>
        <property name="jpaProperties">
         <props>
            <prop key="hibernate.dialect">${hibernate.dialect}</prop>
            <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
            <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
            <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
            <prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
         </props>
      </property>
	</bean>
	
	<!-- Transaction Manager -->
	<bean id="hibernateDialect" class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
		<property name="jpaDialect" ref="hibernateDialect" /> 
	</bean>
	
    <!-- active la configuration pour les transactons basées sur les annotations -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
     
    <!-- On peut ajouter la déclaration suivante pour que Spring traduise les exceptions remontées -->
	<!-- <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/> -->
	
	<bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
		<property name="errorHandler">
	        <bean class="ma.co.marsamaroc.gestion.decomptes.exceptions.DecomptesResponseErrorHandler" />
	    </property>
	    <constructor-arg>
	        <bean class="org.springframework.http.client.HttpComponentsClientHttpRequestFactory">
	            <property name="readTimeout" value="${client.Http.request.readTimeout}" />
	            <property name="connectTimeout" value="${client.Http.request.connectTimeout}" />
	        </bean>
	    </constructor-arg>
	    <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
            </list>
        </property>
	</bean>
	
</beans>	